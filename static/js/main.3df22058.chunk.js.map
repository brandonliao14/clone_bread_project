{"version":3,"sources":["components/navbar.js","components/main.js","components/about.js","components/home.js","components/help.js","components/news.js","components/application.js","components/donation.js","App.js","serviceWorker.js","index.js"],"names":["MyNavbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleNavbar","setState","isOpen","state","react_default","a","createElement","Navbar","light","expand","Link","to","className","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","Component","withRouter","Main","Jumbotron","About","Home","Help","News","Application","Donation","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3df22058.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport {Link, withRouter} from 'react-router-dom'\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem } from 'reactstrap';\n\n\nclass MyNavbar extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      isOpen: false\n    }\n  }\n  toggleNavbar=()=>{\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n  render(){\n    return(\n        <div>\n          <Navbar light expand=\"lg\">\n            <Link to='/' className=\"navbar-brand mr-auto\">\n              Logo Here\n            </Link>\n            <NavbarToggler className=\"text-primary\" onClick={this.toggleNavbar}>\n              <span className=\"navbar-toggler-icon\"></span>\n            </NavbarToggler>\n            <div className=\"border_div\"></div>\n            <Collapse isOpen={this.state.isOpen} navbar>\n                <Nav className=\"ml-auto text-muted\" navbar>\n                  <NavItem className=\"navbar-text\">\n                    <Link to=\"/about\">What We Do</Link>\n                  </NavItem>\n                  <NavItem className=\"navbar-text\">\n                    <Link to=\"/home\" >Who We Are</Link>\n                  </NavItem>\n                  <NavItem className=\"navbar-text\">\n                    <Link to=\"/help\" >Get Involved</Link>\n                  </NavItem>\n                  <NavItem className=\"navbar-text\">\n                    <Link to=\"/news\" >News & Events</Link>\n                  </NavItem>\n                  <NavItem className=\"navbar-text\">\n                    <Link to=\"/application\" >Apply to Program</Link>\n                  </NavItem>\n                  <NavItem className=\"navbar-text\">\n                    <Link to=\"/donation\" >Donate!</Link>\n                  </NavItem>\n                </Nav>\n            </Collapse>\n          </Navbar>\n        </div>\n    )\n  }\n}\n\nexport default withRouter(MyNavbar);\n","import React from 'react'\nimport { Jumbotron } from 'reactstrap';\n\nconst Main = () => {\n  return(\n    <div className='main'>\n        <Jumbotron className=\"jumbotron-fluid text-center text-white\">\n          <div className=\"container-fluid\">\n            <div className=\"display-3\"> Baking Through Barriers</div>\n          </div>\n        </Jumbotron>\n    </div>\n  )\n}\n\nexport default Main;\n","import React from 'react'\n\nconst About = () => {\n  return(\n    <div className='about'>\n      This is the about page\n    </div>\n  )\n}\n\nexport default About;\n","import React from 'react'\n\nconst Home = () => {\n  return(\n    <div className='home'>\n      This is the home page\n    </div>\n  )\n}\n\nexport default Home;\n","import React from 'react'\n\nconst Help = () => {\n  return(\n    <div className='help'>\n      This is the help by getting involved page\n    </div>\n  )\n}\n\nexport default Help;\n","import React from 'react'\n\nconst News = () => {\n  return(\n    <div className='news'>\n      This is the news page\n    </div>\n  )\n}\n\nexport default News;\n","import React from 'react'\n\nconst Application = () => {\n  return(\n    <div className='application'>\n      This is the application page\n    </div>\n  )\n}\n\nexport default Application;\n","import React from 'react'\n\nconst Donation = () => {\n  return(\n    <div className='Donation'>\n      This is the Donation page\n    </div>\n  )\n}\n\nexport default Donation;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {BrowserRouter,Route,Switch} from 'react-router-dom'\nimport Navbar from './components/navbar'\nimport Main from './components/main'\nimport About from './components/about'\nimport Home from './components/home'\nimport Help from './components/help'\nimport News from './components/news'\nimport Application from './components/application'\nimport Donation from './components/donation'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar/>\n          <Switch>\n            <Route exact path='/' component={Main}/>\n            <Route path='/about' component={About}/>\n            <Route path='/home' component={Home}/>\n            <Route path='/help' component={Help}/>\n            <Route path='/news' component={News}/>\n            <Route path='/application' component={Application}/>\n            <Route path='/donation' component={Donation}/>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}